// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v5.26.1
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Timestamp } from '../../../../google/protobuf/timestamp';

export const protobufPackage = 'auth';

export interface AuthenticationMessage {
	token: string;
}

export interface UserMessage {
	/** dones't support _id */
	id: string;
	email: string;
	password: string;
	roles: string[];
	createdAt: Timestamp | undefined;
	updatedAt: Timestamp | undefined;
}

export const AUTH_PACKAGE_NAME = 'auth';

export interface AuthServiceClient {
	auth(request: AuthenticationMessage): Observable<UserMessage>;
}

export interface AuthServiceController {
	auth(request: AuthenticationMessage): Promise<UserMessage> | Observable<UserMessage> | UserMessage;
}

export function AuthServiceControllerMethods() {
	return function(constructor: Function) {
		const grpcMethods: string[] = ['auth'];
		for (const method of grpcMethods) {
			const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
			GrpcMethod('AuthService', method)(constructor.prototype[method], method, descriptor);
		}
		const grpcStreamMethods: string[] = [];
		for (const method of grpcStreamMethods) {
			const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
			GrpcStreamMethod('AuthService', method)(constructor.prototype[method], method, descriptor);
		}
	};
}

export const AUTH_SERVICE_NAME = 'AuthService';
